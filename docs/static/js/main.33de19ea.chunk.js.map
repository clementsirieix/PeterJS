{"version":3,"sources":["components/Image.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","Img","img","_templateObject2","props","isThumbnail","css","_templateObject3","isHidden","_templateObject4","Image","state","isLoaded","_this2","this","src","buffer","document","createElement","onload","setState","_this$props","thumbnailSrc","console","log","react_default","a","React","Component","App_templateObject","Title","App_templateObject2","MenloWrapper","span","App_templateObject3","isTitle","App_templateObject4","withBackground","_templateObject5","HeaderParagraph","_templateObject6","Hyperlink","_templateObject7","SecondTitle","_templateObject8","Paragraph","_templateObject9","CodeBlockWrapper","_templateObject10","Footer","_templateObject11","App","App_Wrapper","href","target","Image_Image","process","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.33de19ea.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst Wrapper = styled.div`\n    float: right;\n    height: 416px;\n    margin-bottom: 38px;\n    margin-top: 25px;\n    position: relative;\n    width: 807px;\n    overflow: hidden;\n`\n\nconst Img = styled.img`\n    left: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 1;\n    transition: opacity 0.4s ease;\n\n    ${props => props.isThumbnail && css`\n        filter: blur(5px);\n        width: 102%;\n        height: 102%;\n        top: -1%;\n        left: -1%;\n    `}\n\n    ${props => props.isHidden && css`\n        opacity: 0;\n    `}\n`\n\nexport default class Image extends React.Component {\n\n    state = { isLoaded: false }\n\n    componentDidMount() {\n        const { src } = this.props\n        const buffer = document.createElement('img')\n        buffer.onload = () => this.setState({ isLoaded: true })\n        buffer.src = src\n    }\n\n    render() {\n        const { src, thumbnailSrc } = this.props\n        const { isLoaded } = this.state\n        console.log(isLoaded);\n\n        return (\n            <Wrapper>\n                <Img src={src} />\n\n                <Img\n                    isHidden={isLoaded}\n                    isThumbnail\n                    src={thumbnailSrc}\n                />\n            </Wrapper>\n        )\n    }\n}\n\nImage.propTypes = {\n    src: PropTypes.string.isRequired,\n    thumbnailSrc: PropTypes.string.isRequired,\n}\n","import React, { Component } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Image from './components/Image'\n\nconst Wrapper = styled.div`\n    margin: 41px 83px;\n`\nconst Title = styled.div`\n    font-size: 36px;\n    line-height: 41px;\n    font-family: 'Playfair Display', serif;\n    color: #00F;\n`\n\nconst MenloWrapper = styled.span`\n    font-family: \"Menlo\", monospace;\n\n    ${props => props.isTitle && css`\n        font-weight: bold;\n    `}\n\n    ${props => props.withBackground && css`\n        display: inline-block;\n        position: relative;\n\n        :before {\n            background-color: #EDEDFA;\n            content: \"\";\n            box-sizing: border-box;\n            position: absolute;\n            top: 2px;\n            left: -2px;\n            right: -2px;\n            bottom: 2px;\n            z-index: -1;\n            border-radius: 2px;\n        }\n    `}\n`\n\nconst HeaderParagraph = styled.div`\n    color: #212121;\n    font-family: 'Montserrat', sans-serif;\n    font-size: 24px;\n    line-height: 32px;\n    max-width: 923px;\n    margin-top: 14px;\n`\nconst Hyperlink = styled.a`\n    color: #212121;\n    text-decoration: underline;\n    font-style: none;\n    transition: color 0.1s ease;\n\n    :hover {\n        color: #00CDFF;\n    }\n`\n\nconst SecondTitle = styled.div`\n    clear: both;\n    font-size: 24px;\n    line-height: 28px;\n    margin: 24px 0;\n    font-family: 'Playfair Display', serif;\n    color: #00F;\n`\n\nconst Paragraph = styled.div`\n    font-family: 'Montserrat', sans-serif;\n    font-size: 16px;\n    line-height: 28px;\n    color: #212121;\n    max-width: 1040px;\n`\n\nconst CodeBlockWrapper = styled.div`\n    border-radius: 2px;\n    background-color: #EDEDFA;\n    color: #212121;\n    font-family: \"Menlo\", monospace;\n    margin: 10px 0;\n    padding: 10px;\n    max-width: 1040px;\n`\n\nconst Footer = styled.div`\n    color: #666;\n    margin-top: 36px;\n    font-size: 11px;\n    width: 100%;\n    text-align:center;\n    font-family: 'Montserrat', sans-serif;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Title>\n            <MenloWrapper isTitle>#</MenloWrapper> PeterJS\n        </Title>\n\n        <HeaderParagraph>\n            PeterJS helps you generate thumbnails of images in your node app, keeping the quality of original pictures while improving your queries response time. You can find the repo of the project on <Hyperlink href=\"https://github.com/clementsirieix/PeterJS\" target=\"_blank\">Github</Hyperlink>.\n        </HeaderParagraph>\n\n        <Image\n            src={process.env.PUBLIC_URL + '/ex.png'}\n            thumbnailSrc={process.env.PUBLIC_URL + '/result.png'}\n        />\n\n        <SecondTitle>\n            <MenloWrapper isTitle>##</MenloWrapper> API\n        </SecondTitle>\n\n        <Paragraph>\n            Peter is the entry point to the peter-generator library. You can import the library through: <br />\n            - a  <MenloWrapper withBackground>&lt;script&gt;</MenloWrapper> tag making <MenloWrapper withBackground>Peter</MenloWrapper> a global <br />\n            - ES6 with npm <MenloWrapper withBackground>import {\"{\"} ThumbnailGenerator {\"}\"} from 'peter-generator'</MenloWrapper> <br />\n            - ES5 with npm <MenloWrapper withBackground>var peter = require('peter-generator')</MenloWrapper> <br />\n            <br />\n            First you will need to initialize an instance of <MenloWrapper withBackground>Peter</MenloWrapper> in order to generate the thumbnails: <br />\n        </Paragraph>\n\n        <CodeBlockWrapper>\n            const gen = new ThumbnailGenerator()\n        </CodeBlockWrapper>\n\n        <Paragraph>\n            You can pass additional parameters to the constructor like so: <br />\n        </Paragraph>\n\n        <CodeBlockWrapper>\n            new ThumbnailGenerator({\"{\"} <br />\n                &emsp;&emsp;maxAttempts: 10, <br />\n                &emsp;&emsp;maxWidth: 90, <br />\n                &emsp;&emsp;sizeLimit: '150kB', <br />\n            {\"}\"})\n        </CodeBlockWrapper>\n\n        <Paragraph>\n            <MenloWrapper withBackground>maxAttempts</MenloWrapper> number, tell the instance how many tries the generation process will allow per query. <br />\n            <MenloWrapper withBackground>maxWidth</MenloWrapper> number, the instance will try to get a thumbnail matching this width (keeping the original ratio) and go smaller with each attempt. <br />\n            <MenloWrapper withBackground>sizeLimit</MenloWrapper> number | string, a number of bytes or a string of format <MenloWrapper withBackground>%dkB</MenloWrapper> telling the instance the maximum thumbnail size tolerated. <br />\n            <br />\n            You can then use your instance by doing: <br />\n        </Paragraph>\n\n        <CodeBlockWrapper>\n            gen.generate(input) <br />\n            &emsp;&emsp;.then(result => {\"{\"} <br />\n            &emsp;&emsp;&emsp;&emsp;// ... <br />\n            &emsp;&emsp;{\"}\"})\n        </CodeBlockWrapper>\n\n        <Paragraph>\n            The <MenloWrapper withBackground>input</MenloWrapper> argument is of type <Hyperlink href=\"https://nodejs.org/api/buffer.html\" target=\"_blank\">Buffer</Hyperlink>. <br />\n            The method returns a <MenloWrapper withBackground>Promise</MenloWrapper> that will provide a <MenloWrapper withBackground>Buffer</MenloWrapper> when resolved. <br />\n            <br />\n            Example of handling a <MenloWrapper withBackground>Buffer</MenloWrapper> with a base64 string: <br />\n        </Paragraph>\n\n        <CodeBlockWrapper>\n            gen.generate(Buffer.from(uri, 'base64')) <br />\n            &emsp;&emsp;.then(result => {\"{\"} <br />\n            &emsp;&emsp;&emsp;&emsp;const base64 = result.toString('base64') <br />\n            &emsp;&emsp;&emsp;&emsp;// ... <br />\n            &emsp;&emsp;{\"}\"})\n        </CodeBlockWrapper>\n\n        <SecondTitle>\n            <MenloWrapper isTitle>##</MenloWrapper> Issues\n        </SecondTitle>\n\n        <Paragraph>\n            If you are facing any issues with the library you can report them on <Hyperlink href=\"https://github.com/clementsirieix/PeterJS/issues\" target=\"_blank\">Github</Hyperlink>.\n        </Paragraph>\n\n        <Footer>\n            2018 - Clément Sirieix\n        </Footer>\n    </Wrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}